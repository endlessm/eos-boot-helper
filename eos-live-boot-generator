#!/bin/sh
#
# Usage: eos-live-boot-generator normal-dir [...]
#
# Conditionally adds additional boot dependencies for live boots.
# This script implements systemd.generator(7).

is_live()
{
    # Check $proc_cmdline, if set, for testing purposes
    grep -q "\<endless.live_boot\>" "${proc_cmdline:-/proc/cmdline}"
}

if ! is_live; then
    exit 0
fi

dest_dir="${1:?normal-dir argument missing}"
system_dir=/usr/lib/systemd/system
local_fs_target_wants="$dest_dir/local-fs.target.wants"
multi_user_target_wants="$dest_dir/multi-user.target.wants"

mkdir -p "$local_fs_target_wants"
mkdir -p "$multi_user_target_wants"

ln -sf "$system_dir/systemd-udev-settle.service" "$local_fs_target_wants/"

# Don't try to remount the (read-only) root filesystem read-write
ln -sf /dev/null "$dest_dir/systemd-remount-fs.service"

unit_path="$dest_dir/run-media-eoslive.mount"
cat << MOUNT_EOSLIVE > "$unit_path"
# Automatically generated by eos-live-boot-generator

[Unit]
Description=Endless Live USB Storage
ConditionKernelCommandLine=endless.image.device

[Mount]
What=/dev/mapper/endless-image-device
Where=/run/media/eoslive
MOUNT_EOSLIVE
ln -sf "$unit_path" "$local_fs_target_wants/"

unit_path="$dest_dir/eoslive-kolibrihome-setup.service"
cat << SETUP_KOLIBRIHOME > "$unit_path"
# Automatically generated by eos-live-boot-generator

[Unit]
Description=Setup Kolibri to use data from Endless Live USB Storage
Requires=run-media-eoslive.mount
After=run-media-eoslive.mount systemd-tmpfiles-setup.service
ConditionKernelCommandLine=endless.image.device
ConditionDirectoryNotEmpty=/run/media/eoslive/.kolibri

[Service]
Type=oneshot
ExecStart=/bin/bash -c 'echo -e "[Context]\nfilesystems=/run/media/eoslive/.kolibri;\n\n[Environment]\nKOLIBRI_HOME=/run/media/eoslive/.kolibri" > /run/flatpak/overrides/org.learningequality.Kolibri'
SETUP_KOLIBRIHOME
ln -sf "$unit_path" "$multi_user_target_wants/"
