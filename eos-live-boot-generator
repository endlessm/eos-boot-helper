#!/bin/sh
#
# Usage: eos-live-boot-generator normal-dir [...]
#
# Conditionally adds additional boot dependencies for live boots.
# This script implements systemd.generator(7).

is_live()
{
    # Check $proc_cmdline, if set, for testing purposes
    grep -q "\<endless.live_boot\>" "${proc_cmdline:-/proc/cmdline}"
}

if ! is_live; then
    exit 0
fi

dest_dir="${1:?normal-dir argument missing}"
system_dir=/usr/lib/systemd/system
local_fs_target_wants="$dest_dir/local-fs.target.wants"
multi_user_target_wants="$dest_dir/multi-user.target.wants"

mkdir -p "$local_fs_target_wants"
mkdir -p "$multi_user_target_wants"

ln -sf "$system_dir/systemd-udev-settle.service" "$local_fs_target_wants/"

# Don't try to remount the (read-only) root filesystem read-write
ln -sf /dev/null "$dest_dir/systemd-remount-fs.service"

#Check if we're booting off an iso image and bail, as this situation
#leads to not having an endless-image-device, which the generated
#units require.
#
#This code was mostly borrowed from eos-image-boot-dm-setup
udevadm settle

for i in $(cat /proc/cmdline); do
    case $i in
    endless.image.device=*)
        host_device=${i#endless.image.device=}
        ;;
    esac
done

#If we don't have an endless image device we don't need the
#generators.
[ -z "${host_device}" ] && exit 0

case "${host_device}" in
PARTUUID=*)
  host_device=/dev/disk/by-partuuid/${host_device#PARTUUID=}
  ;;
UUID=*)
  host_device=/dev/disk/by-uuid/${host_device#UUID=}
  ;;
esac

fstype=$(blkid -o value -s TYPE "${host_device}")
if [ "${fstype}" = iso9660 ]; then
 exit 0
fi

unit_path="$dest_dir/run-media-eoslive.mount"
cat << MOUNT_EOSLIVE > "$unit_path"
# Automatically generated by eos-live-boot-generator

[Unit]
Description=Endless Live USB Storage
ConditionKernelCommandLine=endless.image.device

[Mount]
What=/dev/mapper/endless-image-device
Where=/run/media/eoslive
MOUNT_EOSLIVE
ln -sf "$unit_path" "$local_fs_target_wants/"
