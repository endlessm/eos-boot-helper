#!/usr/bin/python3

# eos-split-flatpak-repo: Split flatpak repo out of system ostree repo
#
# Copyright Â© 2021 Endless OS Foundation LLC
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

from argparse import ArgumentParser
from contextlib import contextmanager
import enum
import gi
from gi.repository import Gio
import logging
import os
import shutil
import tempfile

gi.require_version('OSTree', '1.0')
from gi.repository import OSTree  # noqa: E402

logger = logging.getLogger(os.path.basename(__file__))


class SplitError(Exception):
    pass


class RepoType(enum.Enum):
    OS = enum.auto()
    Flatpak = enum.auto()


def set_repo_path_attr(repo):
    """Set the path attribute on an OSTree.Repo object

    This is just a convenience to not call get_path().get_path() repeatedly.
    """
    repo.path = os.path.realpath(repo.get_path().get_path())


def duplicate_dir(src, dst):
    """Duplicate a directory with hard links"""
    try:
        if os.path.islink(dst):
            logger.debug('Deleting symlink %s', dst)
            os.unlink(dst)
        else:
            logger.debug('Deleting directory %s', dst)
            shutil.rmtree(dst)
    except FileNotFoundError:
        pass

    logger.debug('Duplicating %s to %s', src, dst)
    os.makedirs(os.path.dirname(dst), exist_ok=True)
    shutil.copytree(src, dst, symlinks=True, copy_function=os.link)


@contextmanager
def repo_lock(repo, lock_type):
    """OSTree repo lock context"""
    # FIXME: Fill this in when repo locking is public
    # https://github.com/ostreedev/ostree/issues/2286
    logger.info('Locking repo %s', repo.path)
    yield
    logger.info('Unlocking repo %s', repo.path)


@contextmanager
def repo_transaction(repo):
    """OSTree repo transaction

    Prepares and commits and OSTree transaction on repo. On failures the
    transaction is aborted.
    """
    logger.debug('Preparing repo %s transaction', repo.path)
    repo.prepare_transaction()
    try:
        yield
        logger.debug('Committing repo %s transaction', repo.path)
        repo.commit_transaction()
    except:  # noqa: E722
        logger.debug('Aborting repo %s transaction', repo.path)
        repo.abort_transaction()
        raise


def gather_remotes(repo):
    """Gather remotes into OS and Flatpak lists"""
    os_remotes = []
    flatpak_remotes = []
    for remote in sorted(repo.remote_list()):
        _, xa_disable = repo.get_remote_option(remote, 'xa.disable')
        if xa_disable == 'true':
            logger.debug('Adding OS remote: %s', remote)
            os_remotes.append(remote)
        else:
            logger.debug('Adding Flatpak remote: %s', remote)
            flatpak_remotes.append(remote)

    return os_remotes, flatpak_remotes


def get_refspec_repo_type(refspec, os_remotes, flatpak_remotes):
    """Determine the repo type this refspec should be a part of

    Returns a RepoType or None if it can't be determined.
    """
    _, remote, ref = OSTree.parse_refspec(refspec)
    if remote:
        if remote in os_remotes:
            return RepoType.OS
        elif remote in flatpak_remotes:
            return RepoType.Flatpak
        else:
            # The remote has been deleted, so fall through to the
            # ref heuristics.
            logger.warning('Refspec %s remote %s no longer exists',
                           refspec, remote)

    ref_parts = ref.split('/')
    if len(ref_parts) > 1:
        ref_prefix = ref_parts[0]
    else:
        ref_prefix = ''

    if ref_prefix in ('app', 'runtime', 'deploy'):
        return RepoType.Flatpak
    elif ref_prefix in ('os', 'ostree'):
        return RepoType.OS
    elif ref_prefix in ('appstream', 'appstream2'):
        if remote:
            # This came from a deleted flatpak remote
            return RepoType.Flatpak
        else:
            # Ignore locally generated appstream refs in case someone
            # ran flatpak build-update-repo.
            logger.debug('Ignoring generated ref: %s', ref)
            return None
    elif ref == 'ostree-metadata':
        # Even if this came from a remote we don't know what type it
        # was, so just ignore it.
        logger.debug('Ignoring generated ref: %s', ref)
        return None
    else:
        # XXX: Should this fail here?
        logger.warning('Ignoring unrecognized ref: %s', ref)
        return None


def gather_refs(repo, os_remotes, flatpak_remotes):
    """Gather refs into OS and Flatpak lists"""
    os_refs = []
    flatpak_refs = []
    other_refs = []
    _, all_refs = repo.list_refs_ext(None, OSTree.RepoListRefsExtFlags.NONE)
    for refspec in sorted(all_refs.keys()):
        ref_type = get_refspec_repo_type(refspec, os_remotes, flatpak_remotes)
        if ref_type == RepoType.OS:
            logger.debug('Adding OS ref: %s', refspec)
            os_refs.append(refspec)
        elif ref_type == RepoType.Flatpak:
            logger.debug('Adding Flatpak ref: %s', refspec)
            flatpak_refs.append(refspec)
        else:
            other_refs.append(refspec)

    return os_refs, flatpak_refs, other_refs


def remove_remotes(repo, repo_type, remotes):
    """Remove remotes from repo"""
    logger.info('Removing %s remotes from %s', repo_type.name, repo.path)
    for remote in remotes:
        logger.debug('Removing %s remote %s', repo.path, remote)
        repo.remote_change(None, OSTree.RepoRemoteChange.DELETE_IF_EXISTS,
                           remote, '', None)


def remove_refs(repo, repo_type, refs):
    """Remove refs from repo"""
    logger.info('Removing %s refs from %s', repo_type.name, repo.path)
    with repo_transaction(repo):
        for refspec in refs:
            logger.debug('Removing %s repo ref %s', repo.path, refspec)
            repo.transaction_set_refspec(refspec, None)


def replace_symlink(link, path):
    """Replace a symlink with a real path"""
    if not os.path.islink(link):
        raise SplitError(f'{link} is not a symlink')
    link_tmp_fd, link_tmp = tempfile.mkstemp(prefix=link,
                                             dir=os.path.dirname(link))
    os.close(link_tmp_fd)
    try:
        logger.info('Renaming %s to %s', link, link_tmp)
        os.rename(link, link_tmp)
    except:  # noqa: E722
        logger.error('Removing temporary link %s', link_tmp)
        os.unlink(link_tmp)
        raise
    try:
        logger.info('Renaming %s to %s', path, link)
        os.rename(path, link)
    except:  # noqa: E722
        logger.error('Restoring link %s from %s', link, link_tmp)
        os.rename(link_tmp, link)
        raise
    logger.info('Removing old link %s', link_tmp)
    os.unlink(link_tmp)


# By default pruning is disabled under the assumption that both the
# flatpak and OS repos will eventually be pruned by other operations. So
# long as the refs are removed, the objects will be cleaned up when that
# happens. This would happen when eos-updater deploys a new OS and
# gnome-software/flatpak update, install or delete a flatpak in the
# system installation.
#
# The idea is to make the repo splitting operation fast since the prune
# would be the slow part. Since the objects are all hard linked during
# the split, it won't initially use any extra disk space. However, until
# both repos have been pruned there will be some excess. For instance,
# if you deployed a new OS and /ostree/repo was pruned, it would cleanup
# both the unused flatpak objects as well as the non-rollback OS
# objects. However, until /var/lib/flatpak/repo was pruned, those
# non-rollback OS objects would still exist on disk.
def split_repo(prune=False, root='/'):
    """Split out flatpak repo from system ostree repo

    Returns True when the repos have been split or False when no
    splitting has occurred. If prune is True, both the new flatpak repo
    and original ostree repo will be pruned.

    If root is not /, repos within a separate path can be split. This is
    primarily for testing as it doesn't work well with the absolute
    symlinks present on a real system.
    """
    logger.debug('Loading sysroot %s', root)
    sysroot = OSTree.Sysroot.new(Gio.File.new_for_path(root))
    sysroot.load()
    _, sysroot_locked = sysroot.try_lock()
    if not sysroot_locked:
        raise SplitError(f'Could not lock sysroot {root}')

    ostree_repo = sysroot.repo()
    set_repo_path_attr(ostree_repo)
    logger.debug('OSTree repo path: %s', ostree_repo.path)

    ostree_dir_path = os.path.dirname(ostree_repo.path)
    var_path = os.path.join(ostree_dir_path, 'deploy/eos/var')
    logger.debug('EOS /var path: %s', var_path)
    flatpak_dir_path = os.path.join(var_path, 'lib/flatpak')
    logger.debug('Flatpak dir path: %s', flatpak_dir_path)
    flatpak_repo_path = os.path.join(flatpak_dir_path, 'repo')
    logger.debug('Flatpak repo path: %s', flatpak_repo_path)

    changed = False
    if not os.path.samefile(ostree_repo.path, flatpak_repo_path):
        logger.info('OSTree repo and Flatpak repo have already been split')
    else:
        changed = True

        # Lock the current repo
        with repo_lock(ostree_repo, 'exclusive'):
            # Create the new flatpak repo
            new_flatpak_repo_path = os.path.join(
                os.path.dirname(ostree_repo.path), 'new-flatpak-repo')
            logger.info('Creating new Flatpak repo at %s',
                        new_flatpak_repo_path)
            duplicate_dir(ostree_repo.path, new_flatpak_repo_path)
            new_flatpak_repo = OSTree.Repo.new(
                Gio.File.new_for_path(new_flatpak_repo_path))
            new_flatpak_repo.open()
            set_repo_path_attr(new_flatpak_repo)

            # Lock the new repo
            with repo_lock(new_flatpak_repo, 'exclusive'):
                # Gather the remotes
                logger.info('Gathering OS and Flatpak remotes')
                os_remotes, flatpak_remotes = gather_remotes(ostree_repo)

                # Gather the refs
                logger.info('Gathering OS and Flatpak refs')
                os_refs, flatpak_refs, _ = gather_refs(ostree_repo, os_remotes,
                                                       flatpak_remotes)

                # Remove OS remotes and refs from the flatpak repo
                remove_remotes(new_flatpak_repo, RepoType.OS, os_remotes)
                remove_refs(new_flatpak_repo, RepoType.OS, os_refs)
                if prune:
                    logger.info('Pruning Flatpak repo %s',
                                new_flatpak_repo_path)
                    new_flatpak_repo.prune(OSTree.RepoPruneFlags.REFS_ONLY, -1)

                # Convert the new flatpak repo to a bare-user-only repo.
                logger.info('Changing Flatpak repo %s mode to bare-user-only',
                            new_flatpak_repo_path)
                flatpak_repo_config = new_flatpak_repo.copy_config()
                flatpak_repo_config.set_value('core', 'mode', 'bare-user-only')
                new_flatpak_repo.write_config(flatpak_repo_config)

                # Sync filesystems so everything is on disk. Python
                # doesn't have syncfs, so sync it is.
                logger.info('Synchronizing changes to disk')
                os.sync()

                # Swap the new flatpak repo into place.
                logger.info('Replacing Flatpak repo %s with %s',
                            flatpak_repo_path, new_flatpak_repo_path)
                replace_symlink(flatpak_repo_path, new_flatpak_repo_path)

                # Sync again to make sure the symlink swap is on disk.
                logger.info('Synchronizing changes to disk')
                os.sync()

                # Remove Flatpak remotes and refs from the OS repo
                remove_remotes(ostree_repo, RepoType.Flatpak, flatpak_remotes)
                remove_refs(ostree_repo, RepoType.Flatpak, flatpak_refs)
                if prune:
                    logger.info('Pruning OS repo %s', ostree_repo.path)
                    ostree_repo.prune(OSTree.RepoPruneFlags.REFS_ONLY, -1)

    # Most likely var/lib/flatpak is a symlink to sysroot/flatpak that
    # was needed to ensure the checkouts were on the same filesystem as
    # the repo. Undo that.
    if not os.path.islink(flatpak_dir_path):
        logger.info('Flatpak dir %s is not a symlink', flatpak_dir_path)
    else:
        changed = True
        real_flatpak_dir_path = os.path.realpath(flatpak_dir_path)
        logger.info('Replacing Flatpak dir symlink %s with %s',
                    flatpak_dir_path, real_flatpak_dir_path)
        replace_symlink(flatpak_dir_path, real_flatpak_dir_path)

        # Sync to make sure the symlink swap is on disk.
        logger.info('Synchronizing changes to disk')
        os.sync()

    return changed


def main():
    ap = ArgumentParser(description='Split system flatpak repo')
    ap.add_argument('--prune', action='store_true',
                    help='prune repos after splitting')
    ap.set_defaults(log_level=logging.INFO)
    ap.add_argument('--debug', dest='log_level', action='store_const',
                    const=logging.DEBUG, help='enable debugging messages')
    args = ap.parse_args()

    logging.basicConfig(level=args.log_level)

    split_repo(prune=args.prune)


if __name__ == '__main__':
    main()
